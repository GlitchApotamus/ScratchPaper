import java.text.SimpleDateFormat

plugins {
    id 'io.github.goooler.shadow' version "8.1.8"
    id 'java'
    id 'antlr'
    id 'maven-publish'
}

group = "com.jacoobes.scratchpaper"

static def getTime() {
    SimpleDateFormat sdf = new SimpleDateFormat("yyMMdd-HHmm")
    sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    return sdf.format(new Date()).toString()
}

// Set version to version property if supplied
String shortVersion = null
if (hasProperty('ver')) {
    if (ver.charAt(0) == "v") {
        shortVersion = ver.substring(1).toUpperCase()
    } else {
        shortVersion = ver.toUpperCase()
    }
}

// If the tag includes "-RC-" or no tag is supplied, append "-SNAPSHOT"
int rcIdx
if (shortVersion == null || shortVersion == "") {
    version = getTime() + "-SNAPSHOT"
} else if ((rcIdx = shortVersion.indexOf("-RC-")) != -1) {
    version = shortVersion.substring(0, rcIdx) + "-SNAPSHOT"
} else {
    version = shortVersion
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    maven {
        name 'papermc'
        url 'https://repo.papermc.io/repository/maven-public/'
    }
    mavenCentral()

}
publishing {
    publications(publications -> {
        publications.create("mavenJava", MavenPublication.class, publication -> {
            publication.from(components.java)
            publication.setGroupId(project.getGroup().toString())
            publication.setArtifactId(project.getName())
            publication.setVersion(project.getVersion().toString())
        })
    })

    repositories(repositories -> {
        repositories.maven(repo -> {
            repo.setName("ScratchPaper")
            repo.setUrl(uri(findProperty("uri") != null ? findProperty("uri").toString() : System.getenv("URI")))
            repo.credentials(passwordCredentials -> {
                passwordCredentials.setUsername(findProperty("mavenUser") != null ? findProperty("mavenUser").toString() : System.getenv("MAVEN_USER"))
                passwordCredentials.setPassword(findProperty("mavenPassword") != null ? findProperty("mavenPassword").toString() : System.getenv("MAVEN_PASSWORD"))
            })
        })
    })
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.21-R0.1-SNAPSHOT'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.8.3'
    implementation 'io.papermc:paperlib:1.0.8'
    antlr "org.antlr:antlr4:4.13.1" // use ANTLR version 4
    testImplementation 'io.papermc.paper:paper-api:1.21-R0.1-SNAPSHOT'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
}

test {
    useJUnitPlatform()
}

processResources {
    filesMatching("**/plugin.yml") {
        expand(NAME: rootProject.name, VERSION: version, PACKAGE: project.group.toString())
    }
}

def generatedSrcDir = "src/main/java/com/jacoobes/scratchpaper"
generateGrammarSource {
    arguments += ["-visitor", "-no-listener", "-package", "com.jacoobes.scratchpaper"]
    outputDirectory = file(generatedSrcDir)
}


shadowJar {
    archiveClassifier.set('')  // Ensure the JAR has no classifier
    relocate 'io.papermc.lib', 'shadow.io.papermc.paperlib'
    minimize()
}

// Disable jar and replace with shadowJar
jar.enabled = false
assemble.dependsOn(shadowJar)

tasks.register('printProjectName') {
    doLast {
        println rootProject.name
    }
}

tasks.register('release') {
    dependsOn build  // Ensure shadowJar is executed before release
    doLast {
        if (!version.endsWith("-SNAPSHOT")) {
            // Rename final JAR to trim off version information
            shadowJar.archiveFile.get().getAsFile()
                    .renameTo(layout.buildDirectory.get().toString() + File.separator + 'libs' + File.separator + rootProject.name + '.jar')
        }

    }
    finalizedBy(publish)
}